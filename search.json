[
  {
    "objectID": "FPL_Home_Advantage.html",
    "href": "FPL_Home_Advantage.html",
    "title": "Home Advantage in Fantasy Premier League - Notebook",
    "section": "",
    "text": "Jerome Williams\nMarch 3, 2024\nBack to jeromewilliams.net."
  },
  {
    "objectID": "FPL_Home_Advantage.html#preamble",
    "href": "FPL_Home_Advantage.html#preamble",
    "title": "Home Advantage in Fantasy Premier League - Notebook",
    "section": "Preamble",
    "text": "Preamble\nFirst, let’s load some packages and define some helpers we will use later.\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1      ✔ purrr   1.0.2 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.3.0      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggplot2)\nlibrary(plotrix)\n\nsource_string &lt;- 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams'\n\ntheme_jw &lt;- function() { \n  theme_bw() + \n    theme(\n      plot.title = element_text(face = 'bold', hjust = 0.5),\n      plot.subtitle = element_text(hjust = 0.5),\n      plot.caption = element_text(hjust = 0)\n    )\n}"
  },
  {
    "objectID": "FPL_Home_Advantage.html#preparing-the-data",
    "href": "FPL_Home_Advantage.html#preparing-the-data",
    "title": "Home Advantage in Fantasy Premier League - Notebook",
    "section": "Preparing the data",
    "text": "Preparing the data\n\nFantasy Premier League data\nWe will use data from the Fantasy Premier League data project, which I downloaded previously. The data is stored season by season, so we have to combine seasons. Data on each player/gameweek (such as total points scored) are saved in merged_gw.csv. Player/gameweek data for 2016/17 through 2019/20 does not include player position data (e.g., defender, midfielder, etc.) Since we will need player position data later, we also merge merged_gw.csv with players_raw.csv (which does contain player position data) for seasons 2016/17 through 2019/20.\n\nfpl_data_path &lt;- 'data/Fantasy-Premier-League-master/data/'\n\nload_and_merge_player_and_gameweek_data &lt;- function(season_str) {\n  season_string_dash &lt;- str_replace(season_str, '/', '-')\n  merged_gw &lt;- read_csv(paste0(fpl_data_path, season_string_dash, '/gws/merged_gw.csv'),\n                        show_col_types = FALSE) %&gt;% mutate(season = season_str)\n  players_raw &lt;- read_csv(paste0(fpl_data_path, season_string_dash, '/players_raw.csv'),\n                          show_col_types = FALSE)\n  player_position_data &lt;- players_raw %&gt;% select(id, element_type)\n  gameweek_data &lt;- merged_gw %&gt;% \n    left_join(player_position_data, by = c('element' = 'id')) %&gt;%\n    mutate(position = case_when(element_type == 1 ~ 'GK',\n                              element_type == 2 ~ 'DEF',\n                              element_type == 3 ~ 'MID',\n                              element_type == 4 ~ 'FWD')\n  )\n}\nload_gameweek_data &lt;- function(season_str) {\n  season_string_dash &lt;- str_replace(season_str, '/', '-')\n  merged_gw &lt;- read_csv(paste0(fpl_data_path, season_string_dash, '/gws/merged_gw.csv'),\n                        show_col_types = FALSE) %&gt;% mutate(season = season_str) %&gt;%\n    mutate(position = if_else(position == 'GKP', 'GK', position))\n}\n\nseasons &lt;- list()\nseasons[['2016/17']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2016/17')\nseasons[['2017/18']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2017/18')\nseasons[['2018/19']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2018/19')\nseasons[['2019/20']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2019/20')\nseasons[['2020/21']] &lt;- load_gameweek_data(season_str = '2020/21')\nseasons[['2021/22']] &lt;- load_gameweek_data(season_str = '2021/22')\nseasons[['2022/23']] &lt;- load_gameweek_data(season_str = '2022/23')\ngw &lt;- bind_rows(seasons)\n\nAs a check, let’s see how many observations we have in our combined dataset.\n\nprint(nrow(gw))\n\n[1] 166813\n\n\nWe have 166,813 observations (player/gameweek pairs).\nLater on, we will need a ‘Percent selected by’ field, representing, for each player/gameweek observation, the percentage of FPL managers who selected that player in their teams in that given gameweek. To calculate ‘Percent selected by’, we need data on the total number of managers each season, which we have from the Manager Count dataset. Note that the Manager Count dataset includes data only on the end-of-season manager count and, moreover, is approximate for some of the earlier seasons. Thus, unforrtunately, our ‘Percent selected by’ numbers will be approximate.\nLet’s ensure we have position data for all observations.\n\nany_without_position_data &lt;- gw$position %&gt;% is.na() %&gt;% any()\nprint(any_without_position_data)\n\n[1] FALSE\n\n\nAs a check, let’s plot the number of observations per season.\n\nggplot(gw) + \n  geom_bar(aes(x = season)) + \n  scale_y_continuous(labels = scales::number_format(big.mark = \",\")) +\n  theme_jw() +\n  labs(title = 'Number of gameweek/player observations, by season',\n       subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n       x = 'Season',\n       y = 'Count',\n       caption = source_string)\n\n\n\n\n\n\n\n\nWe are missing a few observations at the end of the 2022/23 season, since our dataset was created mid-season. This should have a noticeable effect on our calculations or conclusions, but is worth bearing in mind.\nLet’s also check the number of distinct gameweeks per season. We should have 38 gameweeks per season.\n\nby_season &lt;- gw %&gt;% group_by(season) %&gt;% summarize(n_gameweeks = n_distinct(GW))\nggplot(by_season) + geom_col(aes(x = season, y = n_gameweeks)) + \n  theme_jw() +\n  labs(\n    title = 'Gameweeks per season',\n    subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n    x = 'Season',\n    y = 'Number of gameweeks',\n    caption = source_string\n  )\n\n\n\n\n\n\n\n\n\n\nTeam level data from football-data.co.uk\nOur FPL data does not have team-level results for every season we are interested in, so we’ll also use data from www.football-data.co.uk. Let’s load this data as well.\n\nfd_data_path &lt;- 'data/footballdata_co_uk/';\n\nload_fd_data &lt;- function(season_string) {\n  season_no_slash &lt;- str_replace(season_string, '/', '') %&gt;% str_replace('20', '')\n  season &lt;- read_csv(\n    paste0(fd_data_path, 'E0_', season_no_slash, '.csv'),\n    show_col_types = FALSE\n    ) %&gt;%\n    mutate(season = season_string)\n}\n\nseason_strings &lt;- c('2016/17',\n                    '2017/18',\n                    '2018/19',\n                    '2019/20',\n                    '2020/21',\n                    '2021/22',\n                    '2022/23')\n\nfd &lt;- lmap(season_strings, load_fd_data) %&gt;% \n  bind_rows()"
  },
  {
    "objectID": "FPL_Home_Advantage.html#team-level-home-advantage",
    "href": "FPL_Home_Advantage.html#team-level-home-advantage",
    "title": "Home Advantage in Fantasy Premier League - Notebook",
    "section": "Team-level home advantage",
    "text": "Team-level home advantage\nBefore we consider home advantage in FPL points for individual players, let’s confirm that we see home advantage in team-level outcomes. Specifically, let’s plot the average win rate and average goals scored for Premier League teams playing at home and playing away between 2016/17 and 2022/23.\nBecause the data has a single row for each match (with e.g. home goals and away goals stored in separate fields), let’s reshape our dataset so that we have a single row for each match-team observation (i.e., two rows per match, with the home_away field indicating ‘Home’ or ‘Away’).\n\nfd_home &lt;- fd %&gt;% select(season,\n                      date = Date,\n                      team = HomeTeam,\n                      opponent = AwayTeam,\n                      goals_scored = FTHG, # full time home goals\n                      goals_conceded = FTAG, # full time away goals\n                      FTR) %&gt;%\n  mutate(home_away = 'Home',\n         result = case_when(FTR == 'H' ~ 'W', # full time result\n                            FTR == 'A' ~ 'L',\n                            FTR == 'D' ~ 'D'),\n         win = (result == 'W'))\nfd_away &lt;- fd %&gt;% select(season,\n                      date = Date,\n                      team = AwayTeam,\n                      opponent = HomeTeam,\n                      goals_scored = FTAG,\n                      goals_conceded = FTHG,\n                      FTR) %&gt;%\n  mutate(home_away = 'Away',\n         result = case_when(FTR == 'H' ~ 'L',\n                            FTR == 'A' ~ 'W',\n                            FTR == 'D' ~ 'D'),\n         win = (result == 'W'))\n\nfd2 &lt;- bind_rows(fd_home, fd_away)\n\n\nTeam-level home advantage in win rate\nNow that we’ve have created our home/away dataset, let’s plot the mean win rate, by season and by home/away.\n\nwin_rate_stats &lt;- fd2 %&gt;% \n  group_by(season, home_away) %&gt;% \n  summarize(mean = mean(win), \n            se = std.error(win),\n            n = n()) %&gt;%\n  mutate(home_away = fct_relevel(home_away, 'Home', 'Away'))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\nggplot(win_rate_stats, aes(x = season, color = home_away)) + \n  geom_point(aes(y = mean)) + \n  geom_linerange(aes(ymin = mean - 1.96 * se,\n                     ymax = mean + 1.96 * se)) +\n  theme_jw() + \n  labs(\n    title = 'Home and away win rates, by season',\n    subtitle = 'English Premier League, 2016/17 - 2022/23',\n    color = '',\n    x = '',\n    y = 'Win rate',\n    caption = 'Source: football-data.co.uk; Jerome Williams'\n  )\n\n\n\n\n\n\n\n\nInterestingly, we see that home advantage disappeared completely in the 2020/21 season. Because of the COVID-19 pandemic, part of 2020/21 Premier League season was played behind closed doors, i.e., with no supporters in stadiums (premierleague.com), and part was played with only a limited number of supporters in stadiums (wikipedia).\nIt is well documented that the behind-closed-doors 2020/21 season resulted in diminished home advantage (link)[https://www.sciencedirect.com/science/article/pii/S146902922100131X]. Indeed, the natural experiment created by the COVID-19 pandemic has provided insight into the sources of home advantage. In their 2021 article in Psychology of Sport & Exercise, Merrick, Bilalic, Neave, and Wolfson find that the diminished home advantage in behind-closed-doors matches provides support for the theory that home advantage stems from (i) the home crowd’s effect on the home team’s performacne, and (ii) the home crowd’s effect on the referee. After the 2020/21 season, alternative possible explanations, such as the effects of travel on the away team’s performance, seem less likely.\nIn our data, we also see that home advantage is also smaller in the 2021/22 season, when supporters were allowed back into stadiums. As far as I know, there is no good explanation for why home advantage was diminished in 2021/22.\nApart from 2020/21 and 2021/22, home advantage in other seasons is pronounced and fairly consistent. Home win rates tend to be between 0.45 to 0.5, while away win rates tend to be between approximately 0.28 and 0.35.\n\n\nTeam-level home advantage in goals scored\nLet’s check whether home advantage also shows up in goals scored. It should, given the likely high correlation between goals scored and win rate.\n\nwin_rate_stats &lt;- fd2 %&gt;% \n  group_by(season, home_away) %&gt;% \n  summarize(mean = mean(goals_scored), \n            se = std.error(goals_scored),\n            n = n()) %&gt;%\n  mutate(home_away = fct_relevel(home_away, 'Home', 'Away'))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\nggplot(win_rate_stats, aes(x = season, color = home_away)) + \n  geom_point(aes(y = mean)) + \n  geom_linerange(aes(ymin = mean - 1.96 * se,\n                     ymax = mean + 1.96 * se)) +\n  theme_jw() + \n  labs(\n    title = 'Home and away goals scored, by season',\n    subtitle = 'English Premier League, 2016/17 - 2022/23',\n    color = '',\n    x = '',\n    y = 'Goals scored',\n    caption = 'Source: football-data.co.uk; Jerome Williams'\n  )\n\n\n\n\n\n\n\n\nIndeed, we see a similar home advantage in goals scored, with the effect disappearing in 2020/21 and smaller in 2021/22. As the plot above shows, outside of 2020/21 and 2021/22, home teams score an average of 1.5-1.6 goals per match while away teams score an average of 1.15-1.25 goals per match."
  },
  {
    "objectID": "FPL_Home_Advantage.html#player-level-home-advantage",
    "href": "FPL_Home_Advantage.html#player-level-home-advantage",
    "title": "Home Advantage in Fantasy Premier League - Notebook",
    "section": "Player-level home advantage",
    "text": "Player-level home advantage\nNow that we’ve confirmed that home advantage obtains at the team-level, let’s turn to our question of interest: do players playing at home score more FPL points on average than players playing away?\nTo answer this question, we’ll start using the Fantasy Premier League dataset.\n\nFiltering to FPL-relevant players\nThe FPL game includes a complete squad for each Premier League team every season. However, a team’s complete squad typically includes several players who end up playing only a small number of minutes over the course of a season and who therefore tend not to be relevant to FPL. We want to exclude these players from the analysis since they will generally score zero points, whether or not their team plays at home or away. We want to focus instead on the players whom FPL managers would actually select.\nTo restrict to game-relevant players, I opt to filter to players who are selected by at least 0.5% of managers in the relevant gameweek.\nLet’s check whether this filtering is sensible. Let’s plot the average minutes played and average FPL points among included and excluded observations, using the 0.5% selection rate exclusion criteria.\n\ngw_check &lt;- gw %&gt;% \n  mutate(included = if_else(pct_selected &gt;= 0.005, 'Included', 'Excluded'))\n\nggplot(gw_check) + \n  geom_histogram(aes(x = minutes), binwidth = 2) +\n  facet_grid(included ~ .) +\n  theme_jw() + \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = 'Minutes played, by exclusion status',\n       subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n       y = 'Observations',\n       x = 'Minutes played',\n       caption = '\nExcluded observations are gameweek/player pairs where \"% managers selected by\" is less \\nthan 0.5%.\n\nSource: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams')\n\n\n\n\n\n\n\n\nThe plot confirms shows that, if we exclude player/gameweek observation with selection rates less than 0.5%, the players excluded are mostly (but not all) players playing zero minutes in the relevant gameweek. Many included players also play zero minutes, but that is to be expected: there is nothing stopping a player who is highly-selected in particular gameweek from playing zero minutes, whether because of injury or squad rotation or some other reason.\nFor the sake of completeness, let’s also compare FPL points scored for included/excluded observations.\n\ngw_check &lt;- gw %&gt;% \n  mutate(included = if_else(pct_selected &gt;= 0.005, 'Included', 'Excluded'))\n\nggplot(gw_check) + \n  geom_histogram(aes(x = total_points), binwidth = 1) +\n  facet_grid(included ~ .) +\n  theme_jw() + \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = 'Gameweek FPL points, by exclusion status',\n       subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n       y = 'Observations',\n       x = 'Gameweek FPL points',\n       caption = '\nExcluded observations are gameweek/player pairs where \"% managers selected by\" is less \\nthan 0.5%.\n\nSource: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams')\n\n\n\n\n\n\n\n\nAs expected, excluded observations are more than included observations likely to score zero FPL points than included observations.\n\n\nPlotting home advantage in FPL points\nNow that we’ve established that filtering out observations with ‘Percentage selected by’ less than 0.5% is sensible, let’s proceed with analyzing player-level home advantage in FPL points. As we did with team-level home advantage, let’s plot the average numbe of FPL points scored (per player per gameweek), displayed by season and by home/away.\n\nhome_away_data &lt;- gw %&gt;%\n  filter(pct_selected &gt;= 0.05) %&gt;%\n  mutate(home_away = if_else(was_home, 'Home', 'Away')) %&gt;%\n  mutate(home_away = as_factor(home_away) %&gt;% fct_relevel('Home'))\n\nhome_away_stats &lt;- home_away_data %&gt;%\n  group_by(home_away, season) %&gt;%\n  summarize(\n    total_points_mean = mean(total_points),\n    total_points_se = std.error(total_points)\n  )\n\n`summarise()` has grouped output by 'home_away'. You can override using the\n`.groups` argument.\n\nggplot(home_away_stats) +\n  geom_point(aes(x = season, y = total_points_mean, color = home_away)) + \n  geom_linerange(aes(x = season, \n                     ymin = total_points_mean - 2*total_points_se,\n                     ymax = total_points_mean + 2*total_points_se,\n                     color = home_away)) +\n  theme_jw() +\n  labs(\n    title = 'Home advantage in FPL points',\n    subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n    x = '',\n    y = 'Points per player per gameweek',\n    color = '',\n    caption = paste0(\n'Plot shows means and 95% confidence intervals.\nExcludes player-gameweek observations where player is selected by less than 0.5% of managers.\\n\\n',\nsource_string)\n)\n\n\n\n\n\n\n\n\nThe plot shows that home advantage does exist in player-level FPL points: players score more FPL points on average in gameweeks when their team plays at home than in gameweeks when their team plays away. Interestingly, following the same pattern as team-level home advantage, home advantage in FPL points is reduced in 2021/22 and disppears entirely in 2020/21.\nInterestingly, the plot also shows that average FPL points per player/gameweek varies quite a bit from season to season. I suspect that the performance of popular players and of popular teams in any given season is what determines this.\n\n\nSources of home advantage: point-scoring actions\nLet’s examine the sources of FPL home advantage. FPL points are based on a variety of different point-scoring actions, as shown in the table below.\n\n\n\nFPL point-scoring action\nPoints\n\n\n\n\nPlayed more than 0 minutes\n1\n\n\nPlayed more than 60 minutes\n1\n\n\nGoal scored (GK / DEF / MID / FWD)\n6 / 6 / 5 / 4\n\n\nAssist\n3\n\n\nEvery 2 goals conceded (GK / DEF)\n-1\n\n\nClean sheet (GK / DEF / MID)\n6 / 6 / 1\n\n\nEvery 3 saves (GK)\n2\n\n\nYellow card\n-1\n\n\nRed card\n-3\n\n\nPenalty saved (GK)\n5\n\n\nPenalty missed\n-2\n\n\n\nSource: https://fantasy.premierleague.com/help/rules\nLet’s plot the frequency of the different point-scoring actions, for home games and for away games. For this analysis, we will exclude the 2020/21 season, since it exhibits no home advantage with respect to total points.\n\ndf_for_source_analysis &lt;- home_away_data %&gt;%\n  filter(season != '2020/21')\n\nvars_for_all_players &lt;- list('minutes', \n                             'goals_scored',\n                             'assists',\n                             'bonus',\n                             'red_cards',\n                             'yellow_cards')\n\ncalc_stats &lt;- function(df, var_, ...) {\n  tibble(mean = mean(df[var_] %&gt;% pull()),\n         se = std.error(df[var_]))\n}\n\nall_stats &lt;- tibble()\nfor (var in vars_for_all_players) {\n  temp &lt;- df_for_source_analysis %&gt;% \n    group_by(home_away) %&gt;%\n    group_modify(function(df, ...) { calc_stats(df, var, ...) }) %&gt;%\n    mutate(var = var) %&gt;%\n    mutate(var = case_when(var == 'assists' ~ 'Assists',\n                           var == 'goals_scored' ~ 'Goals scored',\n                           var == 'bonus' ~ 'Bonus points',\n                           var == 'minutes' ~ 'Minutes played',\n                           var == 'red_cards' ~ 'Red cards',\n                           var == 'yellow_cards' ~ 'Yellow cards'))\n  all_stats &lt;- all_stats %&gt;% bind_rows(temp)\n}\n\ndef_gk &lt;- df_for_source_analysis %&gt;% filter(position == 'GK' | position == 'DEF')\ndef_gk_vars &lt;- list('clean_sheets', 'goals_conceded')\n\ndef_gk_stats &lt;- tibble()\nfor (var_ in def_gk_vars) {\n  temp &lt;- def_gk %&gt;% \n    group_by(home_away) %&gt;%\n    group_modify(function(df, ...) { calc_stats(df, var_, ...) }) %&gt;%\n    mutate('var' = var_)\n  def_gk_stats &lt;- def_gk_stats %&gt;% bind_rows(temp)\n}\ndef_gk_stats &lt;- def_gk_stats %&gt;%\n  mutate(var = case_when(var == 'clean_sheets' ~ 'Clean sheets',\n                         var == 'goals_conceded' ~ 'Goals conceded'))\n\ngk_only &lt;- df_for_source_analysis %&gt;% filter(position == 'GK')\ngk_only_stats &lt;- gk_only %&gt;%\n  group_by(home_away) %&gt;%\n  group_modify(function(df, ...) { calc_stats(df, 'saves', ...)}) %&gt;%\n  mutate('var' = 'Saves')\n\n\nplotting_data &lt;- all_stats %&gt;% \n  bind_rows(def_gk_stats) %&gt;%\n  bind_rows(gk_only_stats) %&gt;%\n  mutate(var = fct_relevel(var, c('Goals scored', 'Assists', 'Minutes played', \n                                  'Bonus points', 'Red cards', 'Yellow cards',\n                                  'Goals conceded', 'Clean sheets', 'Saves')))\n\nggplot(plotting_data, aes(x = home_away, color = home_away)) +\n  geom_point(aes(y = mean)) +\n  geom_linerange(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se)) +\n  facet_wrap(~var, scales = 'free') +\n  labs(title = 'Home advantage in FPL point-scoring actions',\n       subtitle = 'Fantasy Premier League, 2016/17 to 2022/23',\n       caption = 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams\n\nNote: Plots show means and 95% confidence intervals.\nCalculations exclude 2020/21 season and player-gameweeks with selected-by rates less than 0.5%.\n\\'Goals conceded\\' and \\'Clean sheets\\' calculated for defenders and goalkeepers only. \\'Saves\\' calculated for goalkeepers only.',\n      x = '',\n       y = '', \n       color = '') +\n  theme_jw() + \n  theme(legend.position = 'none')\n\n\n\n\n\n\n\n\nThe plot above shows that most point-scoring actions in FPL contribute to home advantage in total points. There are significant differences between home and away matches in all plotted point-scoring actions except for red cards. (I omit Penalties missed and Penalties saved from the plot on account of their rarity.)\nInterestingly, the average number of minutes played (per gameweek/player) is slightly higher for home games than for away games. The difference is small, however—approximately 68.5 minutes for home games vs 67.75 minutes for away games—and is therefore unlikely to be meaningful for FPL points.\n\n\nSources of home advantage: player positions\nLet’s also examine home advantage by player position. Players in FPL are assigned one of four positions—GK, DEF, MID, or FWD—which is fixed for the duration of a season. As I explain above, some of the available point-scoring actions differ by position. However, given that almost all actions, including both attacking actions (goals, assists) and defensive actions (clean sheets, goals conceded, saves, etc.), exhibit home advantage, I expect that we will find home advantage across all four positions as well.\n\ndf_for_position_analysis &lt;- home_away_data %&gt;%\n  filter(season != '2020/21')\n\nvar = 'total_points'\ncalculate_stats &lt;- function(df) {\n  mean_ &lt;- mean(df[var] %&gt;% pull())\n  se_ &lt;- std.error(df[var])\n  tibble(\n    position = df$position[1],\n    home_away = df$home_away[1],\n    mean = mean_,\n    se = se_)\n}\n\npos_stats &lt;- df_for_position_analysis %&gt;%\n  split(list(.$position, .$home_away)) %&gt;%\n  map(calculate_stats) %&gt;%\n  list_rbind() %&gt;%\n  mutate(\n    position = as_factor(position) %&gt;% fct_relevel(c('GK', 'DEF', 'MID', 'FWD'))\n  )\n\nggplot(pos_stats, aes(x = position, color = home_away, group = home_away)) + \n  geom_point(aes(y = mean)) +\n  geom_linerange(aes(ymin = mean - 2 * se, ymax = mean + 2 * se)) +\n  theme_jw() +\n  labs(title = 'Home advantage in FPL points, by player position',\n       subtitle = 'Fantasy Premier League, 2016/17 to 2022/23',\n       x = '',\n       y = 'Points per player per gameweek',\n       color = '',\n       caption = 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams\n\nPlot shows means and 95% confidence intervals.\nCalculations exclude 2020/21 season and player-gameweeks with selected-by rates less than 0.5%.')\n\n\n\n\n\n\n\n\nIndeed, we do find home advantage in FPL points for all four positions. Midfielders seem to have the largest difference, as well as the highest number of points on average."
  },
  {
    "objectID": "FPL_Home_Advantage.html#do-fpl-managers-take-advantage-of-home-advantage",
    "href": "FPL_Home_Advantage.html#do-fpl-managers-take-advantage-of-home-advantage",
    "title": "Home Advantage in Fantasy Premier League - Notebook",
    "section": "Do FPL managers take advantage of home advantage?",
    "text": "Do FPL managers take advantage of home advantage?\nWe have demonstrated that home advantage exists in FPL and exists across seasons and player position. This prompts a question: do managers take advantage of home advantage by selecting home players more frequently than away players?\n\nPlotting Percent selected by for home and away fixtures\nTo answer this question, let’s look at how ‘Percent selected by’ varies between home matches and away matches.\nIdeally, we would also account for the selection of players in managers’ first team of 11 players each gameweek: every gameweek, a manager must choose 11 players from the squad of 15 to “play” in that gameweek (i.e., to score points for the team). The remaining four players sit on the manager’s “bench” and will only score points if they are automatically substituted, which happens if one or more players from the first team of 11 fail to register a single minute of play that gameweek. My guess is that managers may account for home and away fixtures in the first 11 and bench decisions more so than in overall squad selection decisions. Managers are restricted to a single ‘free’ transfer each gameweek—subsequent transfers cost 4 points—meaning that squads change slowly over time and players are typically held by managers for multiple gameweeks (during which they will likely play both home and away matches). However, our FPL dataset includes data only on selection in the squad of 15 (our ‘Percent selected by’ variable) and not on selection in each manager’s first 11 every gameweek.\nThis time, let’s not exclude 2020/21. I don’t think it was widely known at the time that 2020/21 would result in no discernible home advantage, so I suspect FPL managers did not adjust their behavior that season.\n\nselected_by_stats &lt;- home_away_data %&gt;% \n  group_by(season, home_away) %&gt;% \n  summarize(\n    mean = mean(pct_selected),\n    se = std.error(pct_selected),\n    n = n()\n  )\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\nggplot(selected_by_stats, \n       aes(x = season, color = home_away)) + \n  geom_point(aes(y = mean)) + \n  geom_linerange(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se)) + \n  theme_jw() + \n  scale_y_continuous(labels = scales::percent_format(scale = 100)) +\n  labs(\n    title = 'FPL managers\\' selection of players, home vs away fixtures',\n    subtitle = 'Fantasy Premier League, 2016/17 to 2022/23',\n    x = '',\n    color = '',\n    y = '% managers selected by',\n    caption = 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams\n    \nPlot shows means and 95% confidence intervals.\nCalculations exclude player-gameweeks with selection rates less than 0.5%.'\n  )\n\n\n\n\n\n\n\n\nThe plot above shows that there is no meaningful difference in the average selection rate of players with home fixtures vs players with away fixtures.\nHowever, the plot also prompts some additional questions: what exactly is the distribution of ‘Percent selected by’? I am also curious what explains a player’s selection rates: do higher scoring players have higher selection rates? Note that, as explained above, our Percent selected by numbers are (i) based on season-end manager counts, and (ii) based on approximate manager counts for some seasons. As a result, Percent selected by is an approximation and comparisons across seasons should be taken with a grain of salt.\n\n\nThe distribution of Percent selected by\nLet’s look at the distribution of Percent selected by. For the reasons mentioned above, we’ll look at the distribution for a single season only, rather than grouping observations from multiple seasons—I selected 2018/19 arbitrarily. As before, let’s exclude player-gameweek observations where Percent selected by is less than 0.5%.\n\nggplot(gw %&gt;% filter(season == '2018/19', pct_selected &gt; 0.005)) + \n  geom_histogram(aes(x = pct_selected), binwidth = 0.001) + \n  theme_jw() +\n  labs(\n    title = 'Distribution of player selection rates',\n    subtitle = 'Fantasy Premier League, 2018/19 season',\n    x = 'Percent selected by',\n    y = 'Observations',\n    caption = 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams\n    \nExcludes player-gameweeks with selection rates less than 0.5%.'\n  )\n\n\n\n\n\n\n\n\n\n\nDo more highly selected players score more FPL points?\nWhat we have seen so far also prompts us to ask whether FPL managers are more likely to select players who score more highly. Let’s plot gameweek FPL points against percent selected by.\n\nbreaks &lt;- c(-0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 1)\nlabels &lt;- c('0-5%', '5-10%', '10-15%', '15-20%', '20-25%', '25-30%', '30-35%', '35-40%', '40-45%', '45-50%', '50-100%')\ngw2 &lt;- gw %&gt;% \n  mutate(pct_selected_bin = cut(pct_selected, breaks = breaks, labels = labels))\n\nstats &lt;- gw2 %&gt;% \n  group_by(pct_selected_bin) %&gt;%\n  summarize(mean = mean(total_points),\n            se = std.error(total_points),\n            std = sd(total_points),\n            min = min(total_points),\n            max = max(total_points),\n            n = n()) %&gt;%\n  ungroup() %&gt;% \n  mutate(n_pct = n / sum(n))\n\nggplot(stats) +\n  geom_point(aes(x = pct_selected_bin, y = mean)) +\n  geom_linerange(aes(x = pct_selected_bin, ymin = mean - 1.96 * se, ymax = mean + 1.96*se)) +\n  theme_jw() +\n  labs(\n    title = 'Player/gameweek points, by selection rate',\n    subtitle = 'Fantasy Premier League, 2016/17 to 2022/23',\n    x = 'Percent selected by',\n    y = 'Player/gameweek points',\n    caption = '\nSource: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams'\n  )\n\n\n\n\n\n\n\n\nIndeed, it does seem appear that FPL managers are more likely to select higher-scoring players. The relationship is consistent up until Percent selected by of 40% or so—at which point, there are very few observations."
  }
]