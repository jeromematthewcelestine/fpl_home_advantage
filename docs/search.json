[
  {
    "objectID": "FPL_Home_Advantage.html",
    "href": "FPL_Home_Advantage.html",
    "title": "Home Advantage in Fantasy Premier League",
    "section": "",
    "text": "Back to jeromewilliams.net.\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1      ✔ purrr   1.0.2 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.3.0      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggplot2)\nlibrary(plotrix)\n\nsource_string &lt;- 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams'\n\ntheme_jw &lt;- function() { \n  theme_bw() + \n    theme(\n      plot.title = element_text(face = 'bold', hjust = 0.5),\n      plot.subtitle = element_text(hjust = 0.5),\n      plot.caption = element_text(hjust = 0)\n    )\n}"
  },
  {
    "objectID": "FPL_Home_Advantage.html#data",
    "href": "FPL_Home_Advantage.html#data",
    "title": "Home Advantage in Fantasy Premier League",
    "section": "Data",
    "text": "Data\n\nFantasy Premier League data\nWe will use data from the Fantasy Premier League data project, which I have downloaded separately. The data is stored season by season, so we first combine. For each season, we have to merge gameweek data (in merged_gw.csv) with player information (in players_raw.csv)\n\nfpl_data_path &lt;- 'data/Fantasy-Premier-League-master/data/'\n\nload_and_merge_player_and_gameweek_data &lt;- function(season_str) {\n  season_string_dash &lt;- str_replace(season_str, '/', '-')\n  merged_gw &lt;- read_csv(paste0(fpl_data_path, season_string_dash, '/gws/merged_gw.csv'),\n                        show_col_types = FALSE) %&gt;% mutate(season = season_str)\n  players_raw &lt;- read_csv(paste0(fpl_data_path, season_string_dash, '/players_raw.csv'),\n                          show_col_types = FALSE)\n  player_position_data &lt;- players_raw %&gt;% select(id, element_type)\n  gameweek_data &lt;- merged_gw %&gt;% \n    left_join(player_position_data, by = c('element' = 'id')) %&gt;%\n    mutate(position = case_when(element_type == 1 ~ 'GK',\n                              element_type == 2 ~ 'DEF',\n                              element_type == 3 ~ 'MID',\n                              element_type == 4 ~ 'FWD')\n  )\n}\nload_gameweek_data &lt;- function(season_str) {\n  season_string_dash &lt;- str_replace(season_str, '/', '-')\n  merged_gw &lt;- read_csv(paste0(fpl_data_path, season_string_dash, '/gws/merged_gw.csv'),\n                        show_col_types = FALSE) %&gt;% mutate(season = season_str) %&gt;%\n    mutate(position = if_else(position == 'GKP', 'GK', position))\n}\n\nseasons &lt;- list()\nseasons[['2016/17']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2016/17')\nseasons[['2017/18']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2017/18')\nseasons[['2018/19']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2018/19')\nseasons[['2019/20']] &lt;- load_and_merge_player_and_gameweek_data(season_str = '2019/20')\nseasons[['2020/21']] &lt;- load_gameweek_data(season_str = '2020/21')\nseasons[['2021/22']] &lt;- load_gameweek_data(season_str = '2021/22')\nseasons[['2022/23']] &lt;- load_gameweek_data(season_str = '2022/23')\ngw &lt;- bind_rows(seasons)\nprint(nrow(gw))\n\n[1] 166813\n\n\nWe have 166,813 observations (player/gameweek pairs).\nLater on, we will need to look ‘Percent selected by,’ for each player/gaemweek observation, i.e., the percentage of FPL managers who selected a given player in a give gameweek. To calculate ‘Percent selected by,’ we need data on the total number of managers, which we have from the Manager Count dataset.\n\n\nRows: 17 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): season, notes\ndbl (2): gw1count, gw38count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s ensure we have position data for all observations.\n\nany_without_position_data &lt;- gw$position %&gt;% is.na() %&gt;% any()\nprint(any_without_position_data)\n\n[1] FALSE\n\n\nAs a check, let’s plot the number of observations per season.\n\nggplot(gw) + \n  geom_bar(aes(x = season)) + \n  scale_y_continuous(labels = scales::number_format(big.mark = \",\")) +\n  theme_bw() +\n  labs(title = 'Number of gameweek/player observations, by season',\n       subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n       x = 'Season',\n       y = 'Count',\n       caption = source_string)\n\n\n\n\nLet’s also check the number of distinct gameweeks per season. We should have 38 gameweeks per season.\n\nby_season &lt;- gw %&gt;% group_by(season) %&gt;% summarize(n_gameweeks = n_distinct(GW))\nggplot(by_season) + geom_col(aes(x = season, y = n_gameweeks)) + \n  theme_bw() +\n  labs(\n    title = 'Gameweeks per season',\n    subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n    x = 'Season',\n    y = 'Number of gameweeks',\n    caption = source_string\n  )\n\n\n\n\n\n\nTeam level data from football-data.co.uk\nOur FPL data does not have team-level results for every season we are interested in, so we’ll also use data from &lt;www.football-data.co.uk&gt;. Let’s load this data as well.\n\nfd_data_path &lt;- 'data/footballdata_co_uk/';\n\nload_fd_data &lt;- function(season_string) {\n  season_no_slash &lt;- str_replace(season_string, '/', '') %&gt;% str_replace('20', '')\n  season &lt;- read_csv(\n    paste0(fd_data_path, 'E0_', season_no_slash, '.csv'),\n    show_col_types = FALSE\n    ) %&gt;%\n    mutate(season = season_string)\n}\n\nseason_strings &lt;- c('2016/17',\n                    '2017/18',\n                    '2018/19',\n                    '2019/20',\n                    '2020/21',\n                    '2021/22',\n                    '2022/23')\n\nfd &lt;- lmap(season_strings, load_fd_data) %&gt;% \n  bind_rows()"
  },
  {
    "objectID": "FPL_Home_Advantage.html#team-level-home-advantage",
    "href": "FPL_Home_Advantage.html#team-level-home-advantage",
    "title": "Home Advantage in Fantasy Premier League",
    "section": "Team-level home advantage",
    "text": "Team-level home advantage\nBefore we consider home advantage in FPL points for individual players, let’s confirm that we see home advantage in team-level outcomes. Specifically, let’s plot win rate and goals scored for teams playing at home and teams playing away.\nWe will use the &lt;football-data.co.uk&gt; dataset for this. Because the data has a single row for each match (with e.g. home goals and away goals stored in separate fields), let’s reshape so that we have a single row for each match-team observation.\n\nfd_home &lt;- fd %&gt;% select(season,\n                      date = Date,\n                      team = HomeTeam,\n                      opponent = AwayTeam,\n                      goals_scored = FTHG, # full time home goals\n                      goals_conceded = FTAG, # full time away goals\n                      FTR) %&gt;%\n  mutate(home_away = 'Home',\n         result = case_when(FTR == 'H' ~ 'W', # full time result\n                            FTR == 'A' ~ 'L',\n                            FTR == 'D' ~ 'D'),\n         win = (result == 'W'))\nfd_away &lt;- fd %&gt;% select(season,\n                      date = Date,\n                      team = AwayTeam,\n                      opponent = HomeTeam,\n                      goals_scored = FTAG,\n                      goals_conceded = FTHG,\n                      FTR) %&gt;%\n  mutate(home_away = 'Away',\n         result = case_when(FTR == 'H' ~ 'L',\n                            FTR == 'A' ~ 'W',\n                            FTR == 'D' ~ 'D'),\n         win = (result == 'W'))\n\nfd2 &lt;- bind_rows(fd_home, fd_away)\n\n\nTeam-level home advantage in win rate\nNow that we’ve have created our home/away dataset, let’s plot the mean win rate, by season and by home/away.\n\nwin_rate_stats &lt;- fd2 %&gt;% \n  group_by(season, home_away) %&gt;% \n  summarize(mean = mean(win), \n            se = std.error(win),\n            n = n()) %&gt;%\n  mutate(home_away = fct_relevel(home_away, 'Home', 'Away'))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\nggplot(win_rate_stats, aes(x = season, color = home_away)) + \n  geom_point(aes(y = mean)) + \n  geom_linerange(aes(ymin = mean - 1.96 * se,\n                     ymax = mean + 1.96 * se)) +\n  theme_bw() + \n  labs(\n    title = 'Home and away win rates, by season',\n    subtitle = 'English Premier League, 2016/17 - 2022/23',\n    color = '',\n    x = '',\n    y = 'Win rate',\n    caption = 'Source: football-data.co.uk; Jerome Williams'\n  )\n\n\n\n\nInterestingly, we see that home advantage disappeared completely in the 2020/21 season. The 2020/21 was played “behind closed doors,” i.e., without supporters in stadiums, because of the COVID-19 pandemic. It is well documented that the behind-closed-doors season resulted in diminished home advantage. Indeed, this natural experiment has provided insight into the sources of home advantage ….\nHome advantage is also smaller in the 2021/22 season, when a limited numbers of supporters began to be allowed back into stadiums.\nApart from 2020/21 and 2021/22, home advantage in other seasons is pronounced and fairly consistent. Home win rates tend to be between 0.45 to 0.5, while away win rates tend to be between approximately 0.28 and 0.35.\n\n\nTeam-level home advantage in goals scored\nLet’s check whether home advantage also shows up in goals scored. It should, given the likely high correlation between goals scored and win rate.\n\nwin_rate_stats &lt;- fd2 %&gt;% \n  group_by(season, home_away) %&gt;% \n  summarize(mean = mean(goals_scored), \n            se = std.error(goals_scored),\n            n = n()) %&gt;%\n  mutate(home_away = fct_relevel(home_away, 'Home', 'Away'))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\nggplot(win_rate_stats, aes(x = season, color = home_away)) + \n  geom_point(aes(y = mean)) + \n  geom_linerange(aes(ymin = mean - 1.96 * se,\n                     ymax = mean + 1.96 * se)) +\n  theme_bw() + \n  labs(\n    title = 'Home and away goals scored, by season',\n    subtitle = 'English Premier League, 2016/17 - 2022/23',\n    color = '',\n    x = '',\n    y = 'Goals scored',\n    caption = 'Source: football-data.co.uk; Jerome Williams'\n  )\n\n\n\n\nIndeed, we see a similar home advantage in goals scored with the effect disappearing in 2020/21 and smaller in 2021/22. Outside of those two seasons, home teams tend to score 1.5-1.6 goals, on average, while away teams tend to score 1.15-1.25 goals, on average."
  },
  {
    "objectID": "FPL_Home_Advantage.html#home-advantage-in-player-points",
    "href": "FPL_Home_Advantage.html#home-advantage-in-player-points",
    "title": "Home Advantage in Fantasy Premier League",
    "section": "Home advantage in player points",
    "text": "Home advantage in player points\nNow that we’ve confirmed that home advantage obtains at the team-level, let’s turn to our question of interest: do players playing at home score more FPL points on average than players playing away?\nTo answer this question, we’ll turn the Fantasy Premier League dataset.\n\nHome advantage in FPL points per player per gameweek\n\nFiltering to FPL-relevant players\nThe FPL game generally includes a complete squad for each Premier League team. However, a team’s complete squad generally includes several players who play only a small number of minutes over the course of a season and who therefore tend not to be relevant to the game. We want to exclude these players from the analysis: they will generally score zero points, whether or not their team plays at home or away. We want to focus instead on the players whom FPL managers would actually select. To restrict to game-relevant players, I filter to players who are selected by at least 0.5% of managers in the relevant gameweek.\nBefore filtering, let’s check the average minutes played and average FPL points for included and excluded observations. We\n\ngw_check &lt;- gw %&gt;% \n  mutate(included = if_else(pct_selected &gt;= 0.005, 'Included', 'Excluded'))\n\nggplot(gw_check) + \n  geom_histogram(aes(x = minutes), binwidth = 2) +\n  facet_grid(included ~ .) +\n  theme_bw() + \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = 'Minutes played, by exclusion status',\n       subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n       y = 'Observations',\n       x = 'Minutes played',\n       caption = '\nExcluded observations are gameweek/player pairs where \"% managers selected by\" is less \\nthan 0.5%.\n\nSource: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams')\n\n\n\n\nThe plot above shows that, by dropping player/gameweek observation with selection rates less than 0.5%, we mostly exclude non-playing players. Included observations include many with zero minutes played, but that is to be expected: there is nothing stopping a player owned by many managers from playing zero minutes in a particular, whether because of injury or rotation or any othe reason.\nLet’s also compare FPL points scored for included/excluded observations.\n\ngw_check &lt;- gw %&gt;% \n  mutate(included = if_else(pct_selected &gt;= 0.005, 'Included', 'Excluded'))\n\nggplot(gw_check) + \n  geom_histogram(aes(x = total_points), binwidth = 1) +\n  facet_grid(included ~ .) +\n  theme_bw() + \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = 'Gameweek FPL points, by exclusion status',\n       subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n       y = 'Observations',\n       x = 'Gameweek FPL points',\n       caption = '\nExcluded observations are gameweek/player pairs where \"% managers selected by\" is less \\nthan 0.5%.\n\nSource: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams')\n\n\n\n\nAs expected, excluded observations are more likely to zero score FPL points than included observations."
  },
  {
    "objectID": "FPL_Home_Advantage.html#plotting-home-advantage",
    "href": "FPL_Home_Advantage.html#plotting-home-advantage",
    "title": "Home Advantage in Fantasy Premier League",
    "section": "Plotting home advantage",
    "text": "Plotting home advantage\nNow that we’ve established that filtering out observations with ‘% selected by’ less than 0.5% is sensible, let’s proceed with analyzing player-level home advantage in FPL points.\n\nhome_away_data &lt;- gw %&gt;%\n  filter(pct_selected &gt;= 0.05) %&gt;%\n  mutate(home_away = if_else(was_home, 'Home', 'Away')) %&gt;%\n  mutate(home_away = as_factor(home_away) %&gt;% fct_relevel('Home'))\n\nhome_away_stats &lt;- home_away_data %&gt;%\n  group_by(home_away, season) %&gt;%\n  summarize(\n    total_points_mean = mean(total_points),\n    total_points_se = std.error(total_points)\n  )\n\n`summarise()` has grouped output by 'home_away'. You can override using the\n`.groups` argument.\n\nggplot(home_away_stats) +\n  geom_point(aes(x = season, y = total_points_mean, color = home_away)) + \n  geom_linerange(aes(x = season, \n                     ymin = total_points_mean - 2*total_points_se,\n                     ymax = total_points_mean + 2*total_points_se,\n                     color = home_away)) +\n  theme_bw() +\n  labs(\n    title = 'Home advantage in FPL points',\n    subtitle = 'Fantasy Premier League, 2016/17 - 2022/23',\n    x = '',\n    y = 'Points per player per gameweek',\n    color = '',\n    caption = paste0(\n'Plot shows means and 95% confidence intervals.\nExcludes player-gameweek observations where player is selected by less than 0.5% of managers.\\n\\n',\nsource_string)\n)\n\n\n\n\nWe have confirmed that home advantage exists in FPL: players score more FPL points on average in gameweeks when their team plays at home than in gameweeks when their team plays away. Following the same pattern as team-level home advantage, FPL home advantage disappears in 2020/21 and is reduced in 2021/22."
  },
  {
    "objectID": "FPL_Home_Advantage.html#sources-of-home-advantage-player-position-and-point-scoring-actions",
    "href": "FPL_Home_Advantage.html#sources-of-home-advantage-player-position-and-point-scoring-actions",
    "title": "Home Advantage in Fantasy Premier League",
    "section": "Sources of home advantage: player position and point-scoring actions",
    "text": "Sources of home advantage: player position and point-scoring actions\nLet’s examine the sources of FPL home advantage. FPL points are based on a variety of different point-scoring actions, detailed in the table below.\n\n\n\nFPL point-scoring action\nPoints\n\n\n\n\nPlayed more than 0 minutes\n1\n\n\nPlayed more than 60 minutes\n1\n\n\nGoal scored (GK / DEF / MID / FWD)\n6 / 6 / 5 / 4\n\n\nAssist\n3\n\n\nEvery 2 goals conceded (GK / DEF)\n-1\n\n\nClean sheet (GK / DEF / MID)\n6 / 6 / 1\n\n\nEvery 3 saves (GK)\n2\n\n\nYellow card\n-1\n\n\nRed card\n-3\n\n\nPenalty saved (GK)\n5\n\n\nPenalty missed\n-2\n\n\n\nSource: https://fantasy.premierleague.com/help/rules\nLet’s plot the average count for all point-scoring actions by home and away. For this analysis, we will exclude the 2020/21 season, since home advantage did not accrue.\n\ndf_for_source_analysis &lt;- home_away_data %&gt;%\n  filter(season != '2020/21')\n\nvars_for_all_players &lt;- list('minutes', \n                             'goals_scored',\n                             'assists',\n                             'bonus',\n                             'red_cards',\n                             'yellow_cards')\n\ncalc_stats &lt;- function(df, var_, ...) {\n  tibble(mean = mean(df[var_] %&gt;% pull()),\n         se = std.error(df[var_]))\n}\n\nall_stats &lt;- tibble()\nfor (var in vars_for_all_players) {\n  temp &lt;- df_for_source_analysis %&gt;% \n    group_by(home_away) %&gt;%\n    group_modify(function(df, ...) { calc_stats(df, var, ...) }) %&gt;%\n    mutate(var = var) %&gt;%\n    mutate(var = case_when(var == 'assists' ~ 'Assists',\n                           var == 'goals_scored' ~ 'Goals scored',\n                           var == 'bonus' ~ 'Bonus points',\n                           var == 'minutes' ~ 'Minutes played',\n                           var == 'red_cards' ~ 'Red cards',\n                           var == 'yellow_cards' ~ 'Yellow cards'))\n  all_stats &lt;- all_stats %&gt;% bind_rows(temp)\n}\nall_stats\n\n# A tibble: 12 × 4\n   home_away     mean       se var           \n   &lt;fct&gt;        &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;         \n 1 Home      68.7     0.375    Minutes played\n 2 Away      67.7     0.383    Minutes played\n 3 Home       0.157   0.00472  Goals scored  \n 4 Away       0.122   0.00408  Goals scored  \n 5 Home       0.124   0.00401  Assists       \n 6 Away       0.0979  0.00360  Assists       \n 7 Home       0.358   0.00916  Bonus points  \n 8 Away       0.286   0.00834  Bonus points  \n 9 Home       0.00288 0.000574 Red cards     \n10 Away       0.00313 0.000601 Red cards     \n11 Home       0.0871  0.00302  Yellow cards  \n12 Away       0.100   0.00323  Yellow cards  \n\ndef_gk &lt;- df_for_source_analysis %&gt;% filter(position == 'GK' | position == 'DEF')\ndef_gk_vars &lt;- list('clean_sheets', 'goals_conceded')\n\ndef_gk_stats &lt;- tibble()\nfor (var_ in def_gk_vars) {\n  temp &lt;- def_gk %&gt;% \n    group_by(home_away) %&gt;%\n    group_modify(function(df, ...) { calc_stats(df, var_, ...) }) %&gt;%\n    mutate('var' = var_)\n  def_gk_stats &lt;- def_gk_stats %&gt;% bind_rows(temp)\n}\ndef_gk_stats &lt;- def_gk_stats %&gt;%\n  mutate(var = case_when(var == 'clean_sheets' ~ 'Clean sheets',\n                         var == 'goals_conceded' ~ 'Goals conceded'))\n\ngk_only &lt;- df_for_source_analysis %&gt;% filter(position == 'GK')\ngk_only_stats &lt;- gk_only %&gt;%\n  group_by(home_away) %&gt;%\n  group_modify(function(df, ...) { calc_stats(df, 'saves', ...)}) %&gt;%\n  mutate('var' = 'Saves')\n\n\nplotting_data &lt;- all_stats %&gt;% \n  bind_rows(def_gk_stats) %&gt;%\n  bind_rows(gk_only_stats) %&gt;%\n  mutate(var = fct_relevel(var, c('Goals scored', 'Assists', 'Minutes played', \n                                  'Bonus points', 'Red cards', 'Yellow cards',\n                                  'Goals conceded', 'Clean sheets', 'Saves')))\n\nggplot(plotting_data, aes(x = home_away, color = home_away)) +\n  geom_point(aes(y = mean)) +\n  geom_linerange(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se)) +\n  facet_wrap(~var, scales = 'free') +\n  labs(title = 'Home advantage in FPL point-scoring actions',\n       subtitle = 'Fantasy Premier League, 2016/17 to 2022/23',\n       caption = 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams\n\nNote: Plots show means and 95% confidence intervals.\nCalculations exclude 2020/21 season and player-gameweeks with selected-by rates lower than 0.5%.\n\\'Goals conceded\\' and \\'Clean sheets\\' calculated for defenders and goalkeepers only. \\'Saves\\' calculated for goalkeepers only.',\n      x = '',\n       y = '', \n       color = '') +\n  theme_bw() + theme(legend.position = 'none')\n\n\n\n\nThe plot shows that there are significant difference between home and away matches in most FPL point-scoring actions. (I omit penalties missed and penalties saved above because they are rare events.)\nUnsurprisingly, given their rarity, there is no difference detectable difference between home and away games with respect to the average number of red cards.\nPerhaps surprisingly, the average number of minutes played is slightly higher for home games than for away games. The difference is small however (approximately 68.5 minutes for home games vs 67.75 minutes for away games) and is therefore unlikely to be meaningful for FPL points.\nLet’s also examine home advantage by player position (GK, DEF, MID, and FWD). Given that most point-scoring actions, including both attacking actions (goals, assists) and defensive actions (clean sheets, goals conceded, saves), exhibit home advantage, we expect to find home advantage across all four positions as well.\n\ndf_for_position_analysis &lt;- home_away_data %&gt;%\n  filter(season != '2020/21')\n\n\nvar = 'total_points'\ncalculate_stats &lt;- function(df) {\n  mean_ &lt;- mean(df[var] %&gt;% pull())\n  se_ &lt;- std.error(df[var])\n  tibble(\n    position = df$position[1],\n    home_away = df$home_away[1],\n    mean = mean_,\n    se = se_)\n}\n\n# gw %&gt;%\n#   split(list(.$season, .$was_home)) %&gt;%\n#   map(calculate_stats) %&gt;%\n#   list_rbind()\npos_stats &lt;- df_for_position_analysis %&gt;%\n  split(list(.$position, .$home_away)) %&gt;%\n  map(calculate_stats) %&gt;%\n  list_rbind() %&gt;%\n  mutate(\n    position = as_factor(position) %&gt;% fct_relevel(c('GK', 'DEF', 'MID', 'FWD'))\n  )\n\n\nggplot(pos_stats, aes(x = position, color = home_away, group = home_away)) + \n  geom_point(aes(y = mean)) +\n  geom_linerange(aes(ymin = mean - 2 * se, ymax = mean + 2 * se)) +\n  theme_jw() +\n  labs(title = 'Home advantage in FPL points, by player position',\n       subtitle = 'Fantasy Premier League, 2016/17 to 2022/23',\n       x = '',\n       y = 'Points per player per gameweek',\n       color = '',\n       caption = 'Source: https://github.com/vaastav/Fantasy-Premier-League; Jerome Williams\n\nPlot shows means and 95% confidence intervals.\nCalculations exclude 2020/21 season and player-gameweeks with selected-by rates lower than 0.5%.')\n\n\n\n\nIndeed, we do find home advantage in FPL points for all four positions. Midfielders seem to have the largest difference (as well as the highest number of points on average). The overall statistics are also interesting. Midfielders playing at home (who are selected by at least 0.5% of managers) score a little over 4 FPL points in the average gameweek."
  }
]